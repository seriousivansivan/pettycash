<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <title>Petty Cash - Data Entry</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 16px
        }

        header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 12px;
            gap: 10px;
            flex-wrap: wrap
        }

        nav a {
            margin-right: 8px;
            text-decoration: none;
            padding: 6px 10px;
            border-radius: 6px;
            background: #0d6efd;
            color: #fff
        }

        table {
            width: 100%;
            border-collapse: collapse
        }

        th,
        td {
            border: 1px solid #d0d7de;
            padding: 8px;
            font-size: 14px
        }

        th {
            background: #f1f5f9;
            text-align: left
        }

        input[type=text],
        input[type=number],
        input[type=date],
        select {
            width: 100%;
            border: 1px solid #ced4da;
            padding: 6px 8px;
            border-radius: 4px;
            box-sizing: border-box
        }

        tfoot td {
            border: none;
            padding-top: 12px
        }

        .btn {
            padding: 8px 12px;
            border-radius: 6px;
            border: none;
            cursor: pointer
        }

        .btn-primary {
            background: #0d6efd;
            color: #fff
        }

        .btn-secondary {
            background: #6c757d;
            color: #fff
        }

        .btn-danger {
            background: #dc3545;
            color: #fff
        }
    </style>
</head>

<body>
    <header>
        <div>
            <h2 style="margin:0">Petty Cash Voucher Generator</h2>
            <small>Logged in as <%= user.name %> (<%= user.role %>)</small>
        </div>
        <nav>
            <a href="/form">Form</a>
            <a href="/history">History</a>
            <% if (user.role==='admin' ) { %><a href="/users">Users</a><a href="/companies">Companies</a><a
                    href="/dashboard">Dashboard</a>
                <% } %>
                    <a href="/profile">Profile</a>
                    <a href="/logout" style="background:#6c757d">Logout</a>
        </nav>
    </header>

    <div style="margin-bottom:8px">
        <button class="btn btn-secondary" id="refreshCompanies">Refresh companies</button>
    </div>

    <table id="dataTable">
        <thead>
            <tr>
                <th style="width:220px">Company</th>
                <th>Categories</th>
                <th>Description</th>
                <th style="width:120px">Amount</th>
                <th>Pay To</th>
                <th style="width:160px">Date</th>
                <th style="width:130px">Separate voucher?</th>
                <th style="width:60px">Remove</th>
            </tr>
        </thead>
        <tbody id="rows">
            <tr>
                <td>
                    <select name="company" class="companySel" required>
                        <option value="">Loading companies...</option>
                    </select>
                </td>
                <td><input type="text" name="category" class="cat-input" placeholder="Transportation" autocomplete="off" autocapitalize="off" spellcheck="false" required></td>
                <td><input type="text" name="description" placeholder="Fare to ..." required></td>
                <td><input type="number" step="0.01" min="0" name="amount" required></td>
                <td><input type="text" name="payTo" placeholder="Ms.N..." required></td>
                <td><input type="date" name="date" required></td>
                <td style="text-align:center"><input type="checkbox" name="separate"></td>
                <td style="text-align:center"><button class="btn btn-danger remove">X</button></td>
            </tr>
        </tbody>
        <tfoot>
            <tr>
                <td colspan="8">
                    <button class="btn btn-secondary" id="add">Add row</button>
                    <button class="btn btn-primary" id="generate">Generate A5 PDF</button>
                </td>
            </tr>
        </tfoot>
    </table>


    <!-- <script>
        let companyOptionsHTML = '<option value="">-- select company --</option>';

        async function loadCompanies() {
            const res = await fetch('/api/companies');
            const data = await res.json();
            const names = data.names || [];
            companyOptionsHTML = '<option value="">-- select company --</option>' + names.map(n => `<option value="${n}">${n}</option>`).join('');
            document.querySelectorAll('.companySel').forEach(sel => sel.innerHTML = companyOptionsHTML);
        }

        document.getElementById('refreshCompanies').addEventListener('click', (e) => {
            e.preventDefault();
            loadCompanies();
        });

        const tbody = document.getElementById('rows');

         // CATEGORY AUTOCOMPLETE 
        const CATEGORIES = [ 'Office Supplies', 'Office Equipment & Furniture', 'Technology & Electronics', 'Office Maintenance & Cleaning', 'Office Renovation & Repairs', 'Transportation', 'Office Utilities', 'Pantry & Refreshments', 'Software & Subscriptions', 'Professional Services', 'Staff Welfare & HR Expenses', 'Administrative & Legal Expenses', 'Marketing & Communication', 'Security & Safety' ]; 
        const CAT_ITEMS = CATEGORIES.map(label => ({ label, norm: label.toLowerCase().replace(/[^a-z0-9]/g,'') })); 
        function autocompleteCategory(input) { let locking = false; function suggest() { if (locking) return; 
            const raw = input.value; const norm = raw.toLowerCase().replace(/[^a-z0-9]/g,''); 
            if (!norm) return; 
            const hit = CAT_ITEMS.find(it => it.norm.startsWith(norm)); 
            if (hit) { locking = true; const start = raw.length; input.value = hit.label; 
                try { input.setSelectionRange(start, hit.label.length); } 
                catch {} locking = false; } } input.addEventListener('input', suggest); 
                input.addEventListener('keydown', (e) => { if (e.key === 'Tab' || e.key === 'ArrowRight') 
                {const end = input.value.length; try { input.setSelectionRange(end, end); } catch {} } });
                input.addEventListener('focus', () => { if (!input.value) { input.value = ''; } });}

        //End of Category autocomplete 

        document.getElementById('add').addEventListener('click', (e) => {
            e.preventDefault();
            const tr = document.createElement('tr');
            tr.innerHTML = `
        <td>
          <select name="company" class="companySel" required>${companyOptionsHTML}</select>
        </td>
        <td><input type="text" name="category" required></td> With: <td><input type="text" name="category" class="cat-input" autocomplete="off" autocapitalize="off" spellcheck="false" required></td>
        <td><input type="text" name="description" required></td>
        <td><input type="number" step="0.01" min="0" name="amount" required></td>
        <td><input type="text" name="payTo" required></td>
        <td><input type="date" name="date" required></td>
        <td style="text-align:center"><input type="checkbox" name="separate"></td>
        <td style="text-align:center"><button class="btn btn-danger remove">X</button></td>
      `;
            tbody.appendChild(tr);
        });

        tbody.addEventListener('click', (e) => {
            if (e.target.classList.contains('remove')) {
                e.preventDefault();
                e.target.closest('tr').remove();
            }
        });

        function collectRows() {
            const rows = [];
            tbody.querySelectorAll('tr').forEach(tr => {
                const obj = {
                    company: tr.querySelector('select[name="company"]').value,
                    category: tr.querySelector('input[name="category"]').value,
                    description: tr.querySelector('input[name="description"]').value,
                    amount: tr.querySelector('input[name="amount"]').value,
                    payTo: tr.querySelector('input[name="payTo"]').value,
                    date: tr.querySelector('input[name="date"]').value,
                    separate: tr.querySelector('input[name="separate"]').checked
                };
                if (obj.company || obj.category || obj.description) rows.push(obj);
            });
            return rows;
        }

        document.getElementById('generate').addEventListener('click', async (e) => {
            e.preventDefault();
            const rows = collectRows();
            if (rows.length === 0) return alert('Add at least one row.');

            const res = await fetch('/generate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ rows })
            });

            if (!res.ok) {
                alert('Failed to generate PDF');
                return;
            }

            const blob = await res.blob();
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'pettycash.pdf';
            document.body.appendChild(a);
            a.click();
            a.remove();
            URL.revokeObjectURL(url);
        });

        // initial load
        loadCompanies();
    </script> -->


    <script>
  let companyOptionsHTML = '<option value="">-- select company --</option>';
  async function loadCompanies() {
    const res = await fetch('/api/companies');
    const data = await res.json();
    const names = data.names || [];
    companyOptionsHTML = '<option value="">-- select company --</option>' + names.map(n => `<option value="${n}">${n}</option>`).join('');
    document.querySelectorAll('.companySel').forEach(sel => sel.innerHTML = companyOptionsHTML);
  }
  document.getElementById('refreshCompanies').addEventListener('click', (e) => {
    e.preventDefault(); loadCompanies();
  });

  const tbody = document.getElementById('rows');

  const CATEGORIES = [
    'Office Supplies',
    'Equipment & Furniture',
    'Electronics',
    'Maintenance & Cleaning',
    'Renovation & Repairs',
    'Transportation',
    'Office Utilities',
    'Pantry & Refreshments',
    'Software & Subscriptions',
    'Staff Welfare & HR Expenses',
    'Administrative & Legal Expenses',
    'Marketing & Communication',
    'Security & Safety'
  ];
  const CAT_ITEMS = CATEGORIES.map(label => ({ label, norm: label.toLowerCase().replace(/[^a-z0-9]/g,'') }));
  function normalize(s){ return String(s||'').toLowerCase().replace(/[^a-z0-9]/g,''); }
  function findSuggestion(typed){
    const n = normalize(typed);
    if(!n) return null;
    let hit = CAT_ITEMS.find(it => it.norm.startsWith(n));
    if(!hit) hit = CAT_ITEMS.find(it => it.norm.includes(n));
    return hit ? hit.label : null;
  }

  function attachCategoryAutocomplete(input){
    input.setAttribute('autocomplete','off');
    input.setAttribute('autocorrect','off');
    input.setAttribute('autocapitalize','off');
    input.setAttribute('spellcheck','false');
    let internal = false;
    let suppress = false;

    function suggest(){
      if(internal || suppress) return;
      const selStart = input.selectionStart ?? input.value.length;
      const selEnd = input.selectionEnd ?? input.value.length;
      if(selEnd !== input.value.length) return;
      const userPart = input.value.slice(0, selStart);
      if(userPart.length < 2) return;
      const suggestion = findSuggestion(userPart);
      if(!suggestion || suggestion === input.value) return;
      internal = true;
      const prefixLen = userPart.length;
      input.value = suggestion;
      requestAnimationFrame(()=>{ try{ input.setSelectionRange(prefixLen, suggestion.length); }catch{} internal = false; });
    }

    input.addEventListener('input', (e)=>{
      if((e && e.inputType && e.inputType.startsWith('delete')) || suppress){ suppress = false; return; }
      suggest();
    });

    input.addEventListener('keydown', (e)=>{
      if(e.key === 'Backspace' || e.key === 'Delete'){ suppress = true; return; }
      if(e.key==='Tab'||e.key==='Enter'||e.key==='ArrowRight'){
        const start = input.selectionStart ?? 0;
        const end = input.selectionEnd ?? 0;
        if(end > start){
          e.preventDefault();
          requestAnimationFrame(()=>{ try{ input.setSelectionRange(end,end); }catch{} });
        }
      }
    });
  }

  function wireCategoryInputs(){
    document.querySelectorAll('input.cat-input').forEach(inp=>{
      if(!inp.__acBound){ attachCategoryAutocomplete(inp); inp.__acBound = true; }
    });
  }

  document.getElementById('add').addEventListener('click', (e) => {
    e.preventDefault();
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td><select name="company" class="companySel" required>${companyOptionsHTML}</select></td>
      <td><input type="text" name="category" class="cat-input" autocomplete="off" autocapitalize="off" spellcheck="false" required></td>
      <td><input type="text" name="description" required></td>
      <td><input type="number" step="0.01" min="0" name="amount" required></td>
      <td><input type="text" name="payTo" required></td>
      <td><input type="date" name="date" required></td>
      <td style="text-align:center"><input type="checkbox" name="separate"></td>
      <td style="text-align:center"><button class="btn btn-danger remove">X</button></td>
    `;
    tbody.appendChild(tr);
    wireCategoryInputs();
  });

  tbody.addEventListener('click', (e) => {
    if (e.target.classList.contains('remove')) {
      e.preventDefault();
      e.target.closest('tr').remove();
    }
  });

  function collectRows(){
    const rows = [];
    tbody.querySelectorAll('tr').forEach(tr=>{
      const obj = {
        company: tr.querySelector('select[name="company"]').value,
        category: tr.querySelector('input[name="category"]').value,
        description: tr.querySelector('input[name="description"]').value,
        amount: tr.querySelector('input[name="amount"]').value,
        payTo: tr.querySelector('input[name="payTo"]').value,
        date: tr.querySelector('input[name="date"]').value,
        separate: tr.querySelector('input[name="separate"]').checked
      };
      if (obj.company || obj.category || obj.description) rows.push(obj);
    });
    return rows;
  }

  document.getElementById('generate').addEventListener('click', async (e)=>{
    e.preventDefault();
    const rows = collectRows();
    if(rows.length===0){ alert('Add at least one row.'); return; }
    const res = await fetch('/generate',{ method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify({ rows }) });
    if(!res.ok){ alert('Failed to generate PDF'); return; }
    const blob = await res.blob();
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = 'pettycash.pdf';
    document.body.appendChild(a); a.click(); a.remove();
    URL.revokeObjectURL(url);
  });

  loadCompanies();
  wireCategoryInputs();
</script>


</body>

</html>